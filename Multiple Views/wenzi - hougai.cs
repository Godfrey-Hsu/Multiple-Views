//
// File generated by HDevelop for HALCON/.NET (C#) Version 13.0.2.2
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;
    //定义给窗体用变量
    public HTuple cs_Quality = new HTuple();
    public HTuple cs_x = new HTuple();
    public HTuple cs_y = new HTuple();

    // Procedures 
    // Chapter: Develop
    // Short Description: Open a new graphics window that preserves the aspect ratio of the given image. 
    public void dev_open_window_fit_image (HObject ho_Image, HTuple hv_Row, HTuple hv_Column, 
      HTuple hv_WidthLimit, HTuple hv_HeightLimit, out HTuple hv_WindowHandle)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_MinWidth = new HTuple(), hv_MaxWidth = new HTuple();
    HTuple hv_MinHeight = new HTuple(), hv_MaxHeight = new HTuple();
    HTuple hv_ResizeFactor = null, hv_ImageWidth = null, hv_ImageHeight = null;
    HTuple hv_TempWidth = null, hv_TempHeight = null, hv_WindowWidth = new HTuple();
    HTuple hv_WindowHeight = null;
    // Initialize local and output iconic variables 
    hv_WindowHandle = new HTuple();
    //This procedure opens a new graphics window and adjusts the size
    //such that it fits into the limits specified by WidthLimit
    //and HeightLimit, but also maintains the correct image aspect ratio.
    //
    //If it is impossible to match the minimum and maximum extent requirements
    //at the same time (f.e. if the image is very long but narrow),
    //the maximum value gets a higher priority,
    //
    //Parse input tuple WidthLimit
    if ((int)((new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(0))).TupleOr(
        new HTuple(hv_WidthLimit.TupleLess(0)))) != 0)
    {
      hv_MinWidth = 500;
      hv_MaxWidth = 800;
    }
    else if ((int)(new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(
        1))) != 0)
    {
      hv_MinWidth = 0;
      hv_MaxWidth = hv_WidthLimit.Clone();
    }
    else
    {
      hv_MinWidth = hv_WidthLimit.TupleSelect(0);
      hv_MaxWidth = hv_WidthLimit.TupleSelect(1);
    }
    //Parse input tuple HeightLimit
    if ((int)((new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(0))).TupleOr(
        new HTuple(hv_HeightLimit.TupleLess(0)))) != 0)
    {
      hv_MinHeight = 400;
      hv_MaxHeight = 600;
    }
    else if ((int)(new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(
        1))) != 0)
    {
      hv_MinHeight = 0;
      hv_MaxHeight = hv_HeightLimit.Clone();
    }
    else
    {
      hv_MinHeight = hv_HeightLimit.TupleSelect(0);
      hv_MaxHeight = hv_HeightLimit.TupleSelect(1);
    }
    //
    //Test, if window size has to be changed.
    hv_ResizeFactor = 1;
    HOperatorSet.GetImageSize(ho_Image, out hv_ImageWidth, out hv_ImageHeight);
    //First, expand window to the minimum extents (if necessary).
    if ((int)((new HTuple(hv_MinWidth.TupleGreater(hv_ImageWidth))).TupleOr(new HTuple(hv_MinHeight.TupleGreater(
        hv_ImageHeight)))) != 0)
    {
      hv_ResizeFactor = (((((hv_MinWidth.TupleReal())/hv_ImageWidth)).TupleConcat(
          (hv_MinHeight.TupleReal())/hv_ImageHeight))).TupleMax();
    }
    hv_TempWidth = hv_ImageWidth*hv_ResizeFactor;
    hv_TempHeight = hv_ImageHeight*hv_ResizeFactor;
    //Then, shrink window to maximum extents (if necessary).
    if ((int)((new HTuple(hv_MaxWidth.TupleLess(hv_TempWidth))).TupleOr(new HTuple(hv_MaxHeight.TupleLess(
        hv_TempHeight)))) != 0)
    {
      hv_ResizeFactor = hv_ResizeFactor*((((((hv_MaxWidth.TupleReal())/hv_TempWidth)).TupleConcat(
          (hv_MaxHeight.TupleReal())/hv_TempHeight))).TupleMin());
    }
    hv_WindowWidth = hv_ImageWidth*hv_ResizeFactor;
    hv_WindowHeight = hv_ImageHeight*hv_ResizeFactor;
    //Resize window
    //dev_open_window(...);
    HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_ImageHeight-1, hv_ImageWidth-1);

    return;
  }

  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image, ho_GrayImage3, ho_ImageGauss;
    HObject ho_ModelContours=null, ho_TransContours=null, ho_Rectangle=null;
    HObject ho_ImageReduced=null;

    // Local control variables 

    HTuple hv_T1 = null, hv_CheckNO = null, hv_GODS = null;
    HTuple hv_Minspec = null, hv_Setnumber = null, hv_ocvgod = null;
    HTuple hv_RowPlus = null, hv_ColPlus = null, hv_path = null;
    HTuple hv_FileHandle = null, hv_OutLine = null, hv_IsEOF = null;
    HTuple hv_CheckNumber = null, hv_GreedinessNumber = null;
    HTuple hv_Index = null, hv_checkNO = new HTuple(), hv_gods = new HTuple();
    HTuple hv_Mins = new HTuple(), hv_Setn = new HTuple();
    HTuple hv_ocvgodfile = new HTuple(), hv_Setocvchar = new HTuple();
    HTuple hv_ocvchar = new HTuple(), hv_Setrowplus = new HTuple();
    HTuple hv_Setcolplus = new HTuple(), hv_ModelID1 = null;
    HTuple hv_ModelID2 = null, hv_ModelID3 = null, hv_ModelID4 = null;
    HTuple hv_ModelID5 = null, hv_ModelID6 = null, hv_ModelIDs = null;
    HTuple hv_Width = null, hv_Height = null, hv_WindowHandle = new HTuple();
    HTuple hv_Index2 = null, hv_Row1 = new HTuple(), hv_Column1 = new HTuple();
    HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
    HTuple hv_RefRow = new HTuple(), hv_RefColumn = new HTuple();
    HTuple hv_HomMat2D = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Angle = new HTuple();
    HTuple hv_Score = new HTuple(), hv_I = new HTuple(), hv_OCVHandle = new HTuple();
    HTuple hv_Quality = new HTuple(), hv_Index1 = new HTuple();
    HTuple hv_T2 = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_GrayImage3);
    HOperatorSet.GenEmptyObj(out ho_ImageGauss);
    HOperatorSet.GenEmptyObj(out ho_ModelContours);
    HOperatorSet.GenEmptyObj(out ho_TransContours);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.CountSeconds(out hv_T1);

    //**外部控制参数读入***
    hv_CheckNO = new HTuple();
    hv_GODS = new HTuple();
    hv_Minspec = new HTuple();
    hv_Setnumber = new HTuple();
    hv_ocvgod = new HTuple();
    hv_RowPlus = new HTuple();
    hv_ColPlus = new HTuple();
    hv_path = "matchingpara_fengwu_hougai.txt";
    HOperatorSet.OpenFile(hv_path, "input", out hv_FileHandle);
    HOperatorSet.FreadLine(hv_FileHandle, out hv_OutLine, out hv_IsEOF);
    HOperatorSet.TupleNumber(((hv_OutLine.TupleSplit(new HTuple(",,,")))).TupleSelect(
        0), out hv_CheckNumber);
    HOperatorSet.TupleNumber(((hv_OutLine.TupleSplit(new HTuple(",,,")))).TupleSelect(
        1), out hv_GreedinessNumber);
    HTuple end_val15 = hv_CheckNumber-1;
    HTuple step_val15 = 1;
    for (hv_Index=0; hv_Index.Continue(end_val15, step_val15); hv_Index = hv_Index.TupleAdd(step_val15))
    {
      HOperatorSet.FreadLine(hv_FileHandle, out hv_OutLine, out hv_IsEOF);
      HOperatorSet.TupleNumber(((hv_OutLine.TupleSplit(new HTuple(",,,")))).TupleSelect(
          0), out hv_checkNO);
      if (hv_CheckNO == null)
        hv_CheckNO = new HTuple();
      hv_CheckNO[hv_Index] = hv_checkNO;
      HOperatorSet.TupleNumber(((hv_OutLine.TupleSplit(new HTuple(",,,")))).TupleSelect(
          1), out hv_gods);
      if (hv_GODS == null)
        hv_GODS = new HTuple();
      hv_GODS[hv_Index] = hv_gods;
      HOperatorSet.TupleNumber(((hv_OutLine.TupleSplit(new HTuple(",,,")))).TupleSelect(
          2), out hv_Mins);
      if (hv_Minspec == null)
        hv_Minspec = new HTuple();
      hv_Minspec[hv_Index] = hv_Mins;
      HOperatorSet.TupleNumber(((hv_OutLine.TupleSplit(new HTuple(",,,")))).TupleSelect(
          3), out hv_Setn);
      if (hv_Setnumber == null)
        hv_Setnumber = new HTuple();
      hv_Setnumber[hv_Index] = hv_Setn;
      HOperatorSet.TupleNumber(((hv_OutLine.TupleSplit(new HTuple(",,,")))).TupleSelect(
          4), out hv_ocvgodfile);
      if (hv_ocvgod == null)
        hv_ocvgod = new HTuple();
      hv_ocvgod[hv_Index] = hv_ocvgodfile;
      HOperatorSet.TupleNumber(((hv_OutLine.TupleSplit(new HTuple(",,,")))).TupleSelect(
          5), out hv_Setocvchar);
      if (hv_ocvchar == null)
        hv_ocvchar = new HTuple();
      hv_ocvchar[hv_Index] = hv_Setocvchar;
      HOperatorSet.TupleNumber(((hv_OutLine.TupleSplit(new HTuple(",,,")))).TupleSelect(
          6), out hv_Setrowplus);
      if (hv_RowPlus == null)
        hv_RowPlus = new HTuple();
      hv_RowPlus[hv_Index] = hv_Setrowplus;
      HOperatorSet.TupleNumber(((hv_OutLine.TupleSplit(new HTuple(",,,")))).TupleSelect(
          7), out hv_Setcolplus);
      if (hv_ColPlus == null)
        hv_ColPlus = new HTuple();
      hv_ColPlus[hv_Index] = hv_Setcolplus;
    }

    HOperatorSet.CloseFile(hv_FileHandle);

    //**Log 文件创建***

    HOperatorSet.OpenFile("matching_fengwu_result.csv", "output", out hv_FileHandle);


    //**模板读入***

    HOperatorSet.ReadShapeModel("god_fengwu/01_MOVIE_O.shm", out hv_ModelID1);
    HOperatorSet.ReadShapeModel("god_fengwu/02_MENU_M.shm", out hv_ModelID2);
    HOperatorSet.ReadShapeModel("god_fengwu/03_MOVIE_E.shm", out hv_ModelID3);
    HOperatorSet.ReadShapeModel("god_fengwu/04_jiajian.shm", out hv_ModelID4);
    HOperatorSet.ReadShapeModel("god_fengwu/05_C.shm", out hv_ModelID5);
    HOperatorSet.ReadShapeModel("god_fengwu/06_MOVIE_V.shm", out hv_ModelID6);

    hv_ModelIDs = new HTuple();
    hv_ModelIDs = hv_ModelIDs.TupleConcat(hv_ModelID1);
    hv_ModelIDs = hv_ModelIDs.TupleConcat(hv_ModelID2);
    hv_ModelIDs = hv_ModelIDs.TupleConcat(hv_ModelID3);
    hv_ModelIDs = hv_ModelIDs.TupleConcat(hv_ModelID4);
    hv_ModelIDs = hv_ModelIDs.TupleConcat(hv_ModelID5);
    hv_ModelIDs = hv_ModelIDs.TupleConcat(hv_ModelID6);


    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "fw10.bmp");
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    dev_open_window_fit_image(ho_Image, 0, 0, -1, -1, out hv_WindowHandle);
    HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
    ho_GrayImage3.Dispose();
    HOperatorSet.Rgb1ToGray(ho_Image, out ho_GrayImage3);
    ho_ImageGauss.Dispose();
    HOperatorSet.GaussImage(ho_Image, out ho_ImageGauss, 5);

    HTuple end_val61 = hv_CheckNumber-1;
    HTuple step_val61 = 1;

        int idx = 0;
        for (hv_Index2=0; hv_Index2.Continue(end_val61, step_val61); hv_Index2 = hv_Index2.TupleAdd(step_val61))
    {

      //Matching 01: ************************************************
      //Matching 01: BEGIN of generated code for model initialization
      //Matching 01: ************************************************
      HOperatorSet.SetSystem("border_shape_models", "false");
      //
      //Matching 01: Read the shape model from file
      //
      //Matching 01: Get the model contour for transforming it later into the image
      ho_ModelContours.Dispose();
      HOperatorSet.GetShapeModelContours(out ho_ModelContours, hv_ModelIDs.TupleSelect(
          hv_Index2), 1);
      //
      //Matching 01: Set a reference position to show the model
      HOperatorSet.SmallestRectangle1Xld(ho_ModelContours, out hv_Row1, out hv_Column1, 
          out hv_Row2, out hv_Column2);
      hv_RefRow = ((hv_Row2.TupleMax())-(hv_Row1.TupleMin()))/2;
      hv_RefColumn = ((hv_Column2.TupleMax())-(hv_Column1.TupleMin()))/2;
      HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_RefRow, hv_RefColumn, 0, out hv_HomMat2D);
      ho_TransContours.Dispose();
      HOperatorSet.AffineTransContourXld(ho_ModelContours, out ho_TransContours, 
          hv_HomMat2D);
      //
      //Matching 01: Display the model contours
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
      HOperatorSet.DispObj(ho_TransContours, hv_ExpDefaultWinHandle);
      //
      //Matching 01: END of generated code for model initialization
      //Matching 01:  * * * * * * * * * * * * * * * * * * * * * * *
      //Matching 01: BEGIN of generated code for model application
      //
      //Matching 01: Loop over all specified test images

      //Matching 01: Find the model
      HOperatorSet.FindShapeModel(ho_ImageGauss, hv_ModelIDs.TupleSelect(hv_Index2), 
          (new HTuple(0)).TupleRad(), (new HTuple(360)).TupleRad(), hv_Minspec.TupleSelect(
          hv_Index2), hv_Setnumber.TupleSelect(hv_Index2), 0.5, "least_squares", 
          (new HTuple(3)).TupleConcat(1), hv_GreedinessNumber, out hv_Row, out hv_Column, 
          out hv_Angle, out hv_Score);
      //
      //Matching 01: Transform the model contours into the detected positions
      HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
      for (hv_I=0; (int)hv_I<=(int)((new HTuple(hv_Score.TupleLength()))-1); hv_I = (int)hv_I + 1)
      {
        HOperatorSet.HomMat2dIdentity(out hv_HomMat2D);
        HOperatorSet.HomMat2dRotate(hv_HomMat2D, hv_Angle.TupleSelect(hv_I), 0, 0, 
            out hv_HomMat2D);
        HOperatorSet.HomMat2dTranslate(hv_HomMat2D, hv_Row.TupleSelect(hv_I), hv_Column.TupleSelect(
            hv_I), out hv_HomMat2D);
        ho_TransContours.Dispose();
        HOperatorSet.AffineTransContourXld(ho_ModelContours, out ho_TransContours, 
            hv_HomMat2D);
        //HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
       // HOperatorSet.DispObj(ho_TransContours, hv_ExpDefaultWinHandle);

      }

      //
      //Matching 01: Clear model when done

      HOperatorSet.ClearShapeModel(hv_ModelIDs.TupleSelect(hv_Index2));
      //Matching 01: *******************************************
      //Matching 01: END of generated code for model application
      //Matching 01: *******************************************
      //
      //

      //**Matching  Log数据写入外部文件***


      if ((int)(new HTuple(hv_I.TupleEqual(hv_Setnumber.TupleSelect(hv_Index2)))) != 0)
      {
        HOperatorSet.ReadOcv(hv_ocvgod.TupleSelect(hv_Index2), out hv_OCVHandle);
        ho_Rectangle.Dispose();
        HOperatorSet.GenRectangle1(out ho_Rectangle, hv_Row-(hv_RowPlus.TupleSelect(
            hv_Index2)), hv_Column-(hv_ColPlus.TupleSelect(hv_Index2)), hv_Row+(hv_RowPlus.TupleSelect(
            hv_Index2)), hv_Column+(hv_ColPlus.TupleSelect(hv_Index2)));
        ho_ImageReduced.Dispose();
        HOperatorSet.ReduceDomain(ho_ImageGauss, ho_Rectangle, out ho_ImageReduced
            );
        HOperatorSet.DoOcvSimple(ho_ImageReduced, hv_OCVHandle, hv_ocvchar.TupleSelect(
            hv_Index2), "true", "true", "true", "true", 5, out hv_Quality);
                cs_Quality[idx] = hv_Quality;
                cs_x[idx] = hv_Column;
                cs_y[idx] = hv_Row;
                idx++;

        HTuple end_val126 = hv_I;
        HTuple step_val126 = 1;
        for (hv_Index1=1; hv_Index1.Continue(end_val126, step_val126); hv_Index1 = hv_Index1.TupleAdd(step_val126))
        {

          HOperatorSet.FwriteString(hv_FileHandle, ((((((((((((hv_CheckNO.TupleSelect(
              hv_Index2))+new HTuple(","))+(hv_GODS.TupleSelect(hv_Index2)))+new HTuple(","))+"OK")+new HTuple(","))+hv_I)+new HTuple(","))+(hv_Score.TupleSelect(
              hv_Index1-1)))+new HTuple(","))+"Quality")+new HTuple(","))+hv_Quality);
              HOperatorSet.FnewLine(hv_FileHandle);


        }

      }
      else
      {

        HOperatorSet.FwriteString(hv_FileHandle, ((((((((hv_CheckNO.TupleSelect(hv_Index2))+new HTuple(","))+(hv_GODS.TupleSelect(
            hv_Index2)))+new HTuple(","))+"NG")+new HTuple(","))+hv_I)+new HTuple(","))+(hv_Setnumber.TupleSelect(
            hv_Index2)));
        HOperatorSet.FnewLine(hv_FileHandle);

      }
    }


    HOperatorSet.CountSeconds(out hv_T2);
    HOperatorSet.FwriteString(hv_FileHandle, ("执行时间："+(hv_T2-hv_T1))+"S");
    HOperatorSet.CloseFile(hv_FileHandle);

    ho_Image.Dispose();
    ho_GrayImage3.Dispose();
    ho_ImageGauss.Dispose();
    ho_ModelContours.Dispose();
    ho_TransContours.Dispose();
    ho_Rectangle.Dispose();
    ho_ImageReduced.Dispose();

  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }

  public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

